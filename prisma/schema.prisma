generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  clerkId            String        @unique
  email              String        @unique
  firstName          String?
  lastName           String?
  phoneNumber        String?
  dateOfBirth        DateTime?
  preferredExams     String[]
  academicLevel      String?
  goals              String?
  onboardingComplete Boolean       @default(false)
  role               UserRole      @default(STUDENT)
  credits            Float         @default(0.0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  examAttempts       ExamAttempt[]
  createdExams       Exam[]        @relation("ExamCreator")
  transactions       Transaction[]

  @@map("users")
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  questions     Question[]
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  categoryId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId])
  @@map("subcategories")
}

model Question {
  id              String          @id @default(cuid())
  imageUrl        String?
  questionText    String
  optionA         String
  optionB         String
  optionC         String
  optionD         String
  correctAnswer   CorrectAnswer
  explanation     String?
  adminNotes      String?
  class           Int
  difficultyLevel DifficultyLevel
  status          QuestionStatus  @default(DRAFT)
  tags            String[]
  apiResponse     Json
  figures         Json?
  categoryId      String
  subcategoryId   String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  examQuestions   ExamQuestion[]
  category        Category        @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?    @relation(fields: [subcategoryId], references: [id])

  @@map("questions")
}

model ExamCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  exams       Exam[]

  @@map("exam_categories")
}

model Exam {
  id               String         @id @default(cuid())
  title            String
  description      String?
  richDescription  String?
  price            Float          @default(0.0)
  duration         Int
  questionsToServe Int?
  isActive         Boolean        @default(true)
  isFree           Boolean        @default(false)
  examCategoryId   String?
  imageUrl         String?
  createdById      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  examAttempts     ExamAttempt[]
  examQuestions    ExamQuestion[]
  createdBy        User           @relation("ExamCreator", fields: [createdById], references: [id])
  examCategory     ExamCategory?  @relation(fields: [examCategoryId], references: [id])

  @@map("exams")
}

model ExamQuestion {
  id            String   @id @default(cuid())
  examId        String
  questionId    String
  marks         Float    @default(1.0)
  negativeMarks Float    @default(0.0)
  order         Int
  exam          Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([examId, questionId])
  @@unique([examId, order])
  @@map("exam_questions")
}

model ExamAttempt {
  id              String       @id @default(cuid())
  userId          String
  examId          String
  startTime       DateTime     @default(now())
  endTime         DateTime?
  status          ExamStatus   @default(IN_PROGRESS)
  totalMarks      Float?
  percentage      Float?
  creditsUsed     Float
  servedQuestions String[]     @default([])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  answers         ExamAnswer[]
  exam        Exam         @relation(fields: [examId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@map("exam_attempts")
}

model ExamAnswer {
  id             String         @id @default(cuid())
  attemptId      String
  questionId     String
  selectedAnswer CorrectAnswer?
  isCorrect      Boolean?
  marksObtained  Float          @default(0.0)
  timeSpent      Int?
  attempt        ExamAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("exam_answers")
}

model Transaction {
  id                String            @id @default(cuid())
  userId            String
  type              TransactionType
  amount            Float
  credits           Float
  status            TransactionStatus @default(PENDING)
  razorpayOrderId   String?
  razorpayPaymentId String?
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CorrectAnswer {
  A
  B
  C
  D
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum QuestionStatus {
  DRAFT
  PUBLISHED
}

enum ExamStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum TransactionType {
  CREDIT_PURCHASE
  EXAM_PAYMENT
  ADMIN_CREDIT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
